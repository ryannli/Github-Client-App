// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  collapsable={undefined}
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
    }
  }
>
  <RCTScrollView>
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={undefined}
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        enableAutoAutomaticScroll={true}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardShouldPersistTaps="handled"
        keyboardSpace={0}
        onScroll={[Function]}
        resetKeyboardSpace={[Function]}
        resetScrollToCoords={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "flex": 1,
            },
            Object {
              "flex": 1,
            },
          ]
        }
        viewIsInsideTabBar={false}
        virtual={undefined}
      >
        <View>
          <View
            closeOnRowBeginSwipe={false}
            closeOnRowPress={true}
            closeOnScroll={true}
            directionalDistanceChangeThreshold={2}
            disableLeftSwipe={false}
            disableRightSwipe={false}
            leftOpenValue={0}
            previewFirstRow={false}
            recalculateHiddenLayout={false}
            rightOpenValue={0}
            style={Object {}}
            swipeToOpenPercent={50}
            virtual={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              loading
            </Text>
          </View>
        </View>
      </RCTScrollView>
    </View>
  </RCTScrollView>
</View>
`;

exports[`renders correctly with data 1`] = `
<View
  collapsable={undefined}
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
    }
  }
>
  <RCTScrollView>
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={undefined}
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        enableAutoAutomaticScroll={true}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardShouldPersistTaps="handled"
        keyboardSpace={0}
        onScroll={[Function]}
        resetKeyboardSpace={[Function]}
        resetScrollToCoords={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "flex": 1,
            },
            Object {
              "flex": 1,
            },
          ]
        }
        viewIsInsideTabBar={false}
        virtual={undefined}
      >
        <View>
          <View
            closeOnRowBeginSwipe={false}
            closeOnRowPress={true}
            closeOnScroll={true}
            directionalDistanceChangeThreshold={2}
            disableLeftSwipe={false}
            disableRightSwipe={false}
            leftOpenValue={0}
            previewFirstRow={false}
            recalculateHiddenLayout={false}
            rightOpenValue={0}
            style={Object {}}
            swipeToOpenPercent={50}
            virtual={undefined}
          >
            <View
              leftActionActivationDistance={125}
              leftActionReleaseAnimationConfig={null}
              leftActionReleaseAnimationFn={null}
              leftButtonWidth={75}
              leftButtonsActivationDistance={75}
              leftButtonsCloseReleaseAnimationConfig={null}
              leftButtonsCloseReleaseAnimationFn={null}
              leftButtonsOpenReleaseAnimationConfig={null}
              leftButtonsOpenReleaseAnimationFn={null}
              onLayout={[Function]}
              onLeftActionActivate={[Function]}
              onLeftActionComplete={[Function]}
              onLeftActionDeactivate={[Function]}
              onLeftActionRelease={[Function]}
              onLeftButtonsActivate={[Function]}
              onLeftButtonsCloseComplete={[Function]}
              onLeftButtonsCloseRelease={[Function]}
              onLeftButtonsDeactivate={[Function]}
              onLeftButtonsOpenComplete={[Function]}
              onLeftButtonsOpenRelease={[Function]}
              onMoveShouldSetResponder={[Function]}
              onMoveShouldSetResponderCapture={[Function]}
              onPanAnimatedValueRef={[Function]}
              onRef={[Function]}
              onResponderEnd={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderReject={[Function]}
              onResponderRelease={[Function]}
              onResponderStart={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onRightActionActivate={[Function]}
              onRightActionComplete={[Function]}
              onRightActionDeactivate={[Function]}
              onRightActionRelease={[Function]}
              onRightButtonsActivate={[Function]}
              onRightButtonsCloseComplete={[Function]}
              onRightButtonsCloseRelease={[Function]}
              onRightButtonsDeactivate={[Function]}
              onRightButtonsOpenComplete={[Function]}
              onRightButtonsOpenRelease={[Function]}
              onStartShouldSetResponder={[Function]}
              onStartShouldSetResponderCapture={[Function]}
              onSwipeComplete={[Function]}
              onSwipeMove={[Function]}
              onSwipeRelease={[Function]}
              onSwipeStart={[Function]}
              rightActionActivationDistance={125}
              rightActionReleaseAnimationConfig={null}
              rightActionReleaseAnimationFn={null}
              rightButtonWidth={75}
              rightButtonsActivationDistance={75}
              rightButtonsCloseReleaseAnimationConfig={null}
              rightButtonsCloseReleaseAnimationFn={null}
              rightButtonsOpenReleaseAnimationConfig={null}
              rightButtonsOpenReleaseAnimationFn={null}
              style={
                Array [
                  Object {
                    "flexDirection": "row",
                  },
                  undefined,
                ]
              }
              swipeReleaseAnimationConfig={
                Object {
                  "duration": 250,
                  "easing": [Function],
                  "toValue": Object {
                    "x": 0,
                    "y": 0,
                  },
                }
              }
              swipeReleaseAnimationFn={[Function]}
              swipeStartMinDistance={15}
            >
              <View
                collapsable={undefined}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0.5,
                      },
                    ],
                  }
                }
              >
                <View
                  accessibilityComponentType={undefined}
                  accessibilityLabel={undefined}
                  accessibilityTraits={undefined}
                  accessible={true}
                  hasTVPreferredFocus={undefined}
                  hitSlop={undefined}
                  isTVSelectable={true}
                  nativeID={undefined}
                  onLayout={undefined}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={null}
                  testID={undefined}
                  tvParallaxProperties={undefined}
                >
                  <View
                    onPress={[Function]}
                    style={
                      Object {
                        "alignItems": "center",
                        "backgroundColor": "transparent",
                        "borderBottomWidth": 0.5,
                        "borderColor": "#c9c9c9",
                        "flexDirection": "row",
                        "marginLeft": 15,
                        "paddingBottom": 13,
                        "paddingRight": 15,
                        "paddingTop": 13,
                      }
                    }
                    virtual={undefined}
                  >
                    <View
                      style={
                        Object {
                          "alignItems": null,
                          "alignSelf": null,
                          "flex": 1,
                        }
                      }
                      virtual={undefined}
                    >
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        style={
                          Object {
                            "fontFamily": "Cochin",
                            "fontSize": 20,
                            "fontWeight": "bold",
                            "paddingBottom": 5,
                          }
                        }
                      >
                        cogcomp-nlp
                      </Text>
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        note={true}
                        style={
                          Object {
                            "color": "#9E9E9E",
                            "fontSize": 14,
                            "paddingBottom": 5,
                          }
                        }
                      >
                        CogComp's Natural Language Processing libraries
                      </Text>
                      <RCTScrollView
                        horizontal={true}
                      >
                        <View>
                          <Text
                            accessible={true}
                            allowFontScaling={false}
                            ellipsizeMode="tail"
                            style={
                              Array [
                                Object {
                                  "color": undefined,
                                  "fontSize": 15,
                                },
                                undefined,
                                Object {
                                  "fontFamily": "Entypo",
                                  "fontStyle": "normal",
                                  "fontWeight": "normal",
                                },
                              ]
                            }
                          >
                            
                            <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                Object {
                                  "fontSize": 15,
                                  "paddingBottom": 5,
                                }
                              }
                            >
                               
                              0
                               
                            </Text>
                          </Text>
                          <Text
                            accessible={true}
                            allowFontScaling={false}
                            ellipsizeMode="tail"
                            style={
                              Array [
                                Object {
                                  "color": undefined,
                                  "fontSize": 15,
                                },
                                undefined,
                                Object {
                                  "fontFamily": "Material Design Icons",
                                  "fontStyle": "normal",
                                  "fontWeight": "normal",
                                },
                              ]
                            }
                          >
                            
                            <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                Object {
                                  "fontSize": 15,
                                  "paddingBottom": 5,
                                }
                              }
                            >
                               
                              0
                               
                            </Text>
                          </Text>
                          <Text
                            accessible={true}
                            allowFontScaling={false}
                            ellipsizeMode="tail"
                            style={
                              Array [
                                Object {
                                  "color": undefined,
                                  "fontSize": 15,
                                },
                                undefined,
                                Object {
                                  "fontFamily": "Entypo",
                                  "fontStyle": "normal",
                                  "fontWeight": "normal",
                                },
                              ]
                            }
                          >
                            
                            <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                Object {
                                  "fontSize": 15,
                                  "paddingBottom": 5,
                                }
                              }
                            >
                               
                              ryannli
                               
                            </Text>
                          </Text>
                        </View>
                      </RCTScrollView>
                    </View>
                  </View>
                </View>
              </View>
              <View
                collapsable={undefined}
                style={
                  Object {
                    "marginRight": -0,
                    "transform": Array [
                      Object {
                        "translateX": 0.5,
                      },
                    ],
                    "width": 0,
                  }
                }
              >
                <View
                  collapsable={undefined}
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                      "transform": Array [
                        Object {
                          "translateX": 0,
                        },
                      ],
                      "width": 0,
                    }
                  }
                >
                  <View
                    accessibilityComponentType={undefined}
                    accessibilityLabel={undefined}
                    accessibilityTraits={undefined}
                    accessible={true}
                    collapsable={undefined}
                    hasTVPreferredFocus={undefined}
                    hitSlop={undefined}
                    isTVSelectable={true}
                    nativeID={undefined}
                    onLayout={undefined}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "alignItems": "flex-start",
                        "backgroundColor": "gold",
                        "flex": 1,
                        "flexDirection": "column",
                        "justifyContent": "center",
                        "opacity": 1,
                        "padding": 10,
                      }
                    }
                    testID={undefined}
                    tvParallaxProperties={undefined}
                  >
                    <View
                      accessibilityComponentType={undefined}
                      accessibilityLabel={undefined}
                      accessibilityTraits={undefined}
                      accessible={true}
                      collapsable={undefined}
                      hasTVPreferredFocus={undefined}
                      hitSlop={undefined}
                      isTVSelectable={true}
                      nativeID={undefined}
                      onLayout={undefined}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "alignItems": "center",
                          "alignSelf": "flex-start",
                          "backgroundColor": "transparent",
                          "borderBottomWidth": null,
                          "borderColor": "#007aff",
                          "borderLeftWidth": null,
                          "borderRadius": 5,
                          "borderRightWidth": null,
                          "borderTopWidth": null,
                          "elevation": 0,
                          "flexDirection": "row",
                          "height": 45,
                          "justifyContent": "space-between",
                          "opacity": 1,
                          "paddingBottom": 6,
                          "paddingLeft": 12,
                          "paddingTop": 6,
                          "shadowColor": null,
                          "shadowOffset": null,
                          "shadowOpacity": null,
                          "shadowRadius": null,
                        }
                      }
                      testID={undefined}
                      tvParallaxProperties={undefined}
                    >
                      <Text
                        accessible={true}
                        allowFontScaling={false}
                        ellipsizeMode="tail"
                        style={
                          Array [
                            Object {
                              "color": undefined,
                              "fontSize": 30,
                            },
                            undefined,
                            Object {
                              "fontFamily": "FontAwesome",
                              "fontStyle": "normal",
                              "fontWeight": "normal",
                            },
                          ]
                        }
                      >
                        
                      </Text>
                    </View>
                    <Text
                      accessible={true}
                      allowFontScaling={true}
                      ellipsizeMode="tail"
                      style={
                        Object {
                          "fontFamily": "Cochin",
                          "fontSize": 20,
                          "fontWeight": "bold",
                          "paddingLeft": 8,
                          "textAlign": "center",
                        }
                      }
                    >
                      Star
                    </Text>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </RCTScrollView>
    </View>
  </RCTScrollView>
</View>
`;

exports[`renders correctly with starred repositories 1`] = `
<View
  collapsable={undefined}
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
    }
  }
>
  <RCTScrollView>
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={undefined}
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        enableAutoAutomaticScroll={true}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardShouldPersistTaps="handled"
        keyboardSpace={0}
        onScroll={[Function]}
        resetKeyboardSpace={[Function]}
        resetScrollToCoords={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "flex": 1,
            },
            Object {
              "flex": 1,
            },
          ]
        }
        viewIsInsideTabBar={false}
        virtual={undefined}
      >
        <View>
          <View
            closeOnRowBeginSwipe={false}
            closeOnRowPress={true}
            closeOnScroll={true}
            directionalDistanceChangeThreshold={2}
            disableLeftSwipe={false}
            disableRightSwipe={false}
            leftOpenValue={0}
            previewFirstRow={false}
            recalculateHiddenLayout={false}
            rightOpenValue={0}
            style={Object {}}
            swipeToOpenPercent={50}
            virtual={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              loading
            </Text>
          </View>
        </View>
      </RCTScrollView>
    </View>
  </RCTScrollView>
</View>
`;
