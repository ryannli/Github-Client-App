// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  collapsable={undefined}
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
    }
  }
>
  <RCTScrollView
    refreshControl={
      <RefreshControlMock
        onRefresh={undefined}
        refreshing={undefined}
      />
    }
  >
    <RCTRefreshControl />
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={undefined}
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        enableAutoAutomaticScroll={true}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardShouldPersistTaps="handled"
        keyboardSpace={0}
        onScroll={[Function]}
        resetKeyboardSpace={[Function]}
        resetScrollToCoords={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "flex": 1,
            },
            Object {
              "flex": 1,
              "flexDirection": "column",
            },
          ]
        }
        viewIsInsideTabBar={false}
        virtual={undefined}
      >
        <View>
          <View />
          <View
            closeOnRowBeginSwipe={false}
            closeOnRowPress={true}
            closeOnScroll={true}
            directionalDistanceChangeThreshold={2}
            disableLeftSwipe={false}
            disableRightSwipe={false}
            leftOpenValue={0}
            previewFirstRow={false}
            recalculateHiddenLayout={false}
            rightOpenValue={0}
            style={Object {}}
            swipeToOpenPercent={50}
            virtual={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              loading
            </Text>
          </View>
        </View>
      </RCTScrollView>
      <View />
    </View>
  </RCTScrollView>
</View>
`;

exports[`renders correctly with data 1`] = `
<View
  collapsable={undefined}
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
    }
  }
>
  <RCTScrollView
    refreshControl={
      <RefreshControlMock
        onRefresh={undefined}
        refreshing={undefined}
      />
    }
  >
    <RCTRefreshControl />
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={undefined}
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        enableAutoAutomaticScroll={true}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardShouldPersistTaps="handled"
        keyboardSpace={0}
        onScroll={[Function]}
        resetKeyboardSpace={[Function]}
        resetScrollToCoords={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "flex": 1,
            },
            Object {
              "flex": 1,
              "flexDirection": "column",
            },
          ]
        }
        viewIsInsideTabBar={false}
        virtual={undefined}
      >
        <View>
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "alignSelf": "center",
                  "flex": 1,
                },
                Object {
                  "padding": 12,
                },
              ]
            }
            virtual={undefined}
          >
            <Image
              large={true}
              source={
                Object {
                  "uri": "https://avatars2.githubusercontent.com/u/22183752?v=4",
                }
              }
              style={
                Object {
                  "borderRadius": 40,
                  "height": 80,
                  "width": 80,
                }
              }
              virtual={undefined}
            />
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "fontFamily": "Palatino",
                  "fontSize": 18,
                  "fontWeight": "bold",
                  "marginTop": 3,
                  "textAlign": "center",
                  "width": 200,
                }
              }
            >
               
              Ran Li
               
            </Text>
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#9E9E9E",
                  "fontFamily": "Palatino",
                  "fontSize": 16,
                  "marginTop": 3,
                  "textAlign": "center",
                  "width": 200,
                }
              }
            >
               
              ryannli
               
            </Text>
          </View>
          <View
            closeOnRowBeginSwipe={false}
            closeOnRowPress={true}
            closeOnScroll={true}
            directionalDistanceChangeThreshold={2}
            disableLeftSwipe={false}
            disableRightSwipe={false}
            leftOpenValue={0}
            previewFirstRow={false}
            recalculateHiddenLayout={false}
            rightOpenValue={0}
            style={Object {}}
            swipeToOpenPercent={50}
            virtual={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              loading
            </Text>
          </View>
        </View>
      </RCTScrollView>
      <View />
    </View>
  </RCTScrollView>
</View>
`;

exports[`renders correctly with dictionary features 1`] = `
<View
  collapsable={undefined}
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
    }
  }
>
  <RCTScrollView
    refreshControl={
      <RefreshControlMock
        onRefresh={undefined}
        refreshing={undefined}
      />
    }
  >
    <RCTRefreshControl />
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={undefined}
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        enableAutoAutomaticScroll={true}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardShouldPersistTaps="handled"
        keyboardSpace={0}
        onScroll={[Function]}
        resetKeyboardSpace={[Function]}
        resetScrollToCoords={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "flex": 1,
            },
            Object {
              "flex": 1,
              "flexDirection": "column",
            },
          ]
        }
        viewIsInsideTabBar={false}
        virtual={undefined}
      >
        <View>
          <View />
          <View
            closeOnRowBeginSwipe={false}
            closeOnRowPress={true}
            closeOnScroll={true}
            directionalDistanceChangeThreshold={2}
            disableLeftSwipe={false}
            disableRightSwipe={false}
            leftOpenValue={0}
            previewFirstRow={false}
            recalculateHiddenLayout={false}
            rightOpenValue={0}
            style={Object {}}
            swipeToOpenPercent={50}
            virtual={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              loading
            </Text>
          </View>
        </View>
      </RCTScrollView>
      <View />
    </View>
  </RCTScrollView>
</View>
`;
